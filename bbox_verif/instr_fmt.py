'''
    store instr-opcode, 'instr-strname', single_opd in a python list
        - feed instr-opcode to dut
        - feed instr-strname to ref_model

        For rs and rd fields, the '?' characters are replaced randomly by 0/1 each time instrOpMapping is called. 
        Since the design does not include a register file, the register values are fed in from cocoTB.
'''

import numpy as np

def instrOpMapping(rvbase='RV32'):
    instrList = [   # add instructions common to RV32 and RV64 here. replace ?'s w r0/1 randomly
                    ['ANDN',      '0b0100000??????????111?????0110011', 0],
                    ['BCLR',      '0b0100100??????????001?????0110011', 0],
                    ['BEXT',      '0b0100100??????????101?????0110011', 0],
                    ['BINV',      '0b0110100??????????001?????0110011', 0],
                    ['BSET',      '0b0010100??????????001?????0110011', 0],
                    ['CLMUL',     '0b0000101??????????001?????0110011', 0],
                    ['CLMULH',    '0b0000101??????????011?????0110011', 0],
                    ['CLMULR',    '0b0000101??????????010?????0110011', 0],
                    ['CLZ',       '0b011000000000?????001?????0010011', 1],
                    ['CPOP',      '0b011000000010?????001?????0010011', 1],
                    ['CTZ',       '0b011000000001?????001?????0010011', 1],
                    ['MAX',       '0b0000101??????????110?????0110011', 0],
                    ['MAXU',      '0b0000101??????????111?????0110011', 0],
                    ['MIN',       '0b0000101??????????100?????0110011', 0],
                    ['MINU',      '0b0000101??????????101?????0110011', 0],
                    ['ORCB',      '0b001010000111?????101?????0010011', 1],
                    ['ORN',       '0b0100000??????????110?????0110011', 0],
                    ['ROL',       '0b0110000??????????001?????0110011', 0],
                    ['ROR',       '0b0110000??????????101?????0110011', 0],
                    ['SEXTB',     '0b011000000100?????001?????0010011', 1],
                    ['SEXTH',     '0b011000000101?????001?????0010011', 1],
                    ['SH1ADD',    '0b0010000??????????010?????0110011', 0],
                    ['SH2ADD',    '0b0010000??????????100?????0110011', 0],
                    ['SH3ADD',    '0b0010000??????????110?????0110011', 0],
                    ['XNOR',      '0b0100000??????????100?????0110011', 0]
                ]
    if(rvbase == 'RV32'):
        rv32_extras = [
                        ['BCLRI',     '0b0100100??????????001?????0010011', 0],
                        ['BEXTI',     '0b0100100??????????101?????0010011', 0],
                        ['BINVI',     '0b0110100??????????001?????0010011', 0],
                        ['BSETI',     '0b0010100??????????001?????0010011', 0],
                        ['REV8',      '0b011010011000?????101?????0010011', 1],
                        ['RORI',      '0b0110000??????????101?????0010011', 0],
                        ['ZEXTH',     '0b000010000000?????100?????0110011', 1]
                      ]
        for instr in rv32_extras:
            instrList.append(instr)
    else:
        rv64_extras = [
                        ['BCLRI',     '0b010010???????????001?????0010011', 0],
                        ['BEXTI',     '0b010010???????????101?????0010011', 0],
                        ['BINVI',     '0b011010???????????001?????0010011', 0],
                        ['BSETI',     '0b001010???????????001?????0010011', 0],
                        ['REV8',      '0b011010111000?????101?????0010011', 1],
                        ['RORI',      '0b011000???????????101?????0010011', 0],
                        ['ZEXTH',     '0b000010000000?????100?????0111011', 1],
                        ['ADDUW',     '0b0000100??????????000?????0111011', 0],
                        ['CLZW',      '0b011000000000?????001?????0011011', 1],
                        ['CPOPW',     '0b011000000010?????001?????0011011', 1],
                        ['CTZW',      '0b011000000001?????001?????0011011', 1],
                        ['ROLW',      '0b0110000??????????001?????0111011', 0],
                        ['RORIW',     '0b0110000??????????101?????0011011', 0],
                        ['RORW',      '0b0110000??????????101?????0111011', 0],
                        ['SH1ADDUW',  '0b0010000??????????010?????0111011', 0],
                        ['SH2ADDUW',  '0b0010000??????????100?????0111011', 0],
                        ['SH3ADDUW',  '0b0010000??????????110?????0111011', 0],
                        ['SLLIUW',    '0b000010???????????001?????0011011', 0]
                      ]
        for instr in rv64_extras:
            instrList.append(instr)
    #
    for i in range(len(instrList)):
        instr = instrList[i]
        bstring = instr[1]
        while('?' in bstring):
            rand = np.random.randint(0, 2)
            bstring = bstring.replace('?', str(rand), 1)
        instr[1] = bstring
        instrList[i] = (instr[0], int(instr[1], base= 2), instr[2])
    #
    return instrList
